Day 5

1. Single Inheritance
Create a base class Animal with a member function speak(). Derive a class Dog from Animal and override the speak() function to display "Bark". Instantiate a Dog object and call the speak() function.

2. Multilevel Inheritance
Create a class Person with a member function introduce(). Derive a class Employee from Person with a member function jobRole(). Further, derive a class Manager from Employee with a function manage(). Demonstrate multilevel inheritance by creating an object of Manager and calling all three functions.

 3. Multiple Inheritance
Create two base classes Teacher and SportsPerson, each having a function teach() and play(), respectively. Derive a class Student from both classes and implement a function study(). Instantiate the Student class and call all three functions (teach(), play(), and study()).

 4. Hierarchical Inheritance
Create a base class Vehicle with a member function start(). Derive two classes Car and Bike from Vehicle. Each class should have its own move() function. Demonstrate hierarchical inheritance by creating objects of both Car and Bike and calling the functions.

 5. Hybrid Inheritance
Create a base class Person with a member function details(). Derive two classes Employee and Customer from Person. Further, derive a class VIPCustomer from both Employee and Customer. Implement a function offerDiscount() in the VIPCustomer class. Demonstrate hybrid inheritance with objects of VIPCustomer.

 6. Using the Protected Access Modifier
Create a base class Animal with a protected member name. Derive a class Cat from Animal. Implement a function in Cat to display the name. Demonstrate the use of the protected access modifier by creating an object of Cat and displaying the name.

 7. Constructor Execution Order in Inheritance
Create a base class Base with a constructor that prints "Base class constructor". Derive a class Derived from Base and have a constructor that prints "Derived class constructor". Create an object of Derived and observe the order in which the constructors are executed.

 8. Constructor Initialization in Inheritance
Create a base class Book with a parameterized constructor to initialize the title and author. Derive a class Magazine from Book and add a member issueNumber. Demonstrate constructor initialization in inheritance by creating an object of Magazine and initializing both title and issueNumber.

 9. Method Overriding in Inheritance
Create a base class Shape with a member function draw(). Derive a class Circle from Shape and override the draw() function to display "Drawing Circle". Create an object of Circle and call the overridden draw() function.

 10. Inheritance with Static Members
Create a class Employee with a static member count that keeps track of the number of Employee objects created. Derive a class Manager from Employee and show how the count is shared between the base and derived class by creating instances of both Employee and Manager.


---------------------------------------------------------------------------------------------------------------------------


 1. Single Inheritance
#include <iostream>
using namespace std;

class Animal {
public:
    void speak() {
        cout << "Animal speaks" << endl;
    }
};

class Dog : public Animal {
public:
    void speak() {
        cout << "Bark" << endl;
    }
};

int main() {
    Dog d;
    d.speak();  // Calls the overridden function in Dog class
    return 0;
}

 2. Multilevel Inheritance

#include <iostream>
using namespace std;

class Person {
public:
    void introduce() {
        cout << "Hello, I am a person." << endl;
    }
};

class Employee : public Person {
public:
    void jobRole() {
        cout << "I am an employee." << endl;
    }
};

class Manager : public Employee {
public:
    void manage() {
        cout << "I manage the team." << endl;
    }
};

int main() {
    Manager m;
    m.introduce();  // From Person class
    m.jobRole();    // From Employee class
    m.manage();     // From Manager class
    return 0;
}

 3. Multiple Inheritance


#include <iostream>
using namespace std;

class Teacher {
public:
    void teach() {
        cout << "Teaching a class." << endl;
    }
};

class SportsPerson {
public:
    void play() {
        cout << "Playing sports." << endl;
    }
};

class Student : public Teacher, public SportsPerson {
public:
    void study() {
        cout << "Studying for exams." << endl;
    }
};

int main() {
    Student s;
    s.teach();  // From Teacher class
    s.play();   // From SportsPerson class
    s.study();  // From Student class
    return 0;
}


 4. Hierarchical Inheritance

#include <iostream>
using namespace std;

class Vehicle {
public:
    void start() {
        cout << "Vehicle is starting." << endl;
    }
};

class Car : public Vehicle {
public:
    void move() {
        cout << "Car is moving." << endl;
    }
};

class Bike : public Vehicle {
public:
    void move() {
        cout << "Bike is moving." << endl;
    }
};

int main() {
    Car c;
    Bike b;
    
    c.start();
    c.move();
    
    b.start();
    b.move();
    
    return 0;
}

 5. Hybrid Inheritance

#include <iostream>
using namespace std;

class Person {
public:
    void details() {
        cout << "This is a person." << endl;
    }
};

class Employee : public Person {
public:
    void jobRole() {
        cout << "Employee's job role." << endl;
    }
};

class Customer : public Person {
public:
    void purchase() {
        cout << "Customer is purchasing." << endl;
    }
};

class VIPCustomer : public Employee, public Customer {
public:
    void offerDiscount() {
        cout << "VIP customer gets a discount." << endl;
    }
};

int main() {
    VIPCustomer vip;
    vip.offerDiscount();
    vip.jobRole();   // From Employee class
    vip.purchase();  // From Customer class
    return 0;
}

 6. Using the Protected Access Modifier

#include <iostream>
using namespace std;

class Animal {
protected:
    string name;

public:
    Animal(string n) : name(n) {}
};

class Cat : public Animal {
public:
    Cat(string n) : Animal(n) {}

    void display() {
        cout << "Cat name: " << name << endl;
    }
};

int main() {
    Cat c("Whiskers");
    c.display();
    return 0;
}

 7. Constructor Execution Order in Inheritance

#include <iostream>
using namespace std;

class Base {
public:
    Base() {
        cout << "Base class constructor" << endl;
    }
};

class Derived : public Base {
public:
    Derived() {
        cout << "Derived class constructor" << endl;
    }
};

int main() {
    Derived d;  // Constructor of Base class is called first, then Derived class
    return 0;
}


 8. Constructor Initialization in Inheritance

#include <iostream>
using namespace std;

class Book {
private:
    string title;
    string author;

public:
    Book(string t, string a) : title(t), author(a) {}

    void display() {
        cout << "Title: " << title << ", Author: " << author << endl;
    }
};

class Magazine : public Book {
private:
    int issueNumber;

public:
    Magazine(string t, string a, int issue) : Book(t, a), issueNumber(issue) {}

    void display() {
        Book::display();  // Call base class display function
        cout << "Issue Number: " << issueNumber << endl;
    }
};

int main() {
    Magazine m("Tech Today", "John Doe", 5);
    m.display();
    return 0;
}


 9. Method Overriding in Inheritance

#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() {
        cout << "Drawing Shape" << endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing Circle" << endl;
    }
};

int main() {
    Shape* s;
    Circle c;
    s = &c;

    s->draw();  // Calls the overridden method in Circle class
    return 0;
}


 10. Inheritance with Static Members


#include <iostream>
using namespace std;

class Employee {
protected:
    static int count;

public:
    Employee() {
        count++;
    }

    static void displayCount() {
        cout << "Number of employees: " << count << endl;
    }
};

int Employee::count = 0;

class Manager : public Employee {};

int main() {
    Employee e1;
    Manager m1, m2;

    Employee::displayCount();  // Static variable is shared between base and derived classes
    return 0;
}
