Day 9

ðŸ”¹ Function Templates and Class Templates
1.Create a function template to find the maximum of two values.

2.Write a class template for a simple calculator that adds, subtracts, multiplies, and divides two numbers.

3.Create a function template to swap two variables of any data type.

4.Write a class template that stores two generic values and displays them.

ðŸ”¹ Introduction to STL
5.Write a program to demonstrate storing integers in a vector and printing them.

6.Create a list of strings and display all elements.

7.Implement a basic stack program using STL that pushes and pops elements.

8.Create a queue of integers and demonstrate enqueue and dequeue operations.

ðŸ”¹ Iterators and Algorithms in STL
9.Use an iterator to display elements in a vector.

10.Use STL sort() algorithm to sort a vector of integers in ascending order.

---------------------------------------------------------------------------------------------

 1. Function template to find maximum of two values

#include <iostream>
using namespace std;

template <typename T>
T findMax(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << "Max: " << findMax(10, 20) << endl;
    cout << "Max: " << findMax(5.5, 3.3) << endl;
    return 0;
}
âœ… 2. Class template for a simple calculator

#include <iostream>
using namespace std;

template <class T>
class Calculator {
public:
    T a, b;
    Calculator(T x, T y) : a(x), b(y) {}
    void display() {
        cout << "Add: " << a + b << endl;
        cout << "Subtract: " << a - b << endl;
        cout << "Multiply: " << a * b << endl;
        cout << "Divide: " << a / b << endl;
    }
};

int main() {
    Calculator<int> calc(20, 10);
    calc.display();
    return 0;
}
âœ… 3. Function template to swap two variables

#include <iostream>
using namespace std;

template <typename T>
void swapValues(T &x, T &y) {
    T temp = x;
    x = y;
    y = temp;
}

int main() {
    int a = 10, b = 20;
    swapValues(a, b);
    cout << "a = " << a << ", b = " << b << endl;
    return 0;
}
âœ… 4. Class template that stores and displays two values

#include <iostream>
using namespace std;

template <class T1, class T2>
class Pair {
    T1 first;
    T2 second;
public:
    Pair(T1 a, T2 b) : first(a), second(b) {}
    void display() {
        cout << "First: " << first << ", Second: " << second << endl;
    }
};

int main() {
    Pair<int, float> p1(5, 4.5);
    p1.display();
    return 0;
}
âœ… 5. Store integers in a vector and print


#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> v = {1, 2, 3, 4, 5};
    for (int i : v) {
        cout << i << " ";
    }
    cout << endl;
    return 0;
}
âœ… 6. Create a list of strings and display elements

#include <iostream>
#include <list>
using namespace std;

int main() {
    list<string> names = {"Alice", "Bob", "Charlie"};
    for (string name : names) {
        cout << name << " ";
    }
    cout << endl;
    return 0;
}
âœ… 7. Basic stack operations using STL

#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> s;
    s.push(10);
    s.push(20);
    s.push(30);

    cout << "Top: " << s.top() << endl;
    s.pop();
    cout << "Top after pop: " << s.top() << endl;
    return 0;
}
âœ… 8. Queue operations using STL

#include <iostream>
#include <queue>
using namespace std;

int main() {
    queue<int> q;
    q.push(100);
    q.push(200);
    q.push(300);

    cout << "Front: " << q.front() << endl;
    q.pop();
    cout << "Front after pop: " << q.front() << endl;
    return 0;
}
âœ… 9. Use iterator to display vector elements

#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> v = {5, 10, 15};
    vector<int>::iterator it;

    for (it = v.begin(); it != v.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
    return 0;
}
âœ… 10. Sort a vector of integers using sort()

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> v = {40, 10, 30, 20};
    sort(v.begin(), v.end());

    for (int i : v) {
        cout << i << " ";
    }
    cout << endl;
    return 0;
}